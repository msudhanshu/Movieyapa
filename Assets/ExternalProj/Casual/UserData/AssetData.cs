using System.Collections.Generic;
using System;
using KiwiCommonDatabase;
using SimpleSQL;

[System.Serializable]

/**
 * Data for the type of a building. Public variables are used for simplicity of serialization
 * but should not be modified directly.
 */ 
public class AssetData : BaseDbModel{

	List<string> _allowIds;
	List<string> _requireIds;
	List<string> _activities;
	List<CustomResource> _additionalCosts;

	List<GridPosition> _shape;

	[PrimaryKey]
	public virtual string id {get; set;}						// Unique id of the building.
	public virtual string name {get; set;}						// Human readable name of the building.
	public virtual string description {get; set;}				// A human readable description of the building.
	public virtual string spriteName {get; set;}				// The name of the sprite used to represent this building.
	public virtual int cost {get; set;}							// How many resources it costs to build this building. For obstacles the cost to clear.
	public virtual int buildTime {get; set;}					// How long in seconds it takes to build this building. For obstalces the time to clear.
	public virtual string allowIdsStr {get; set;}
	public virtual string requireIdsStr {get; set;}
	public virtual string activitiesStr {get; set;}
	public virtual int sizex {get; set;}	
	public virtual int sizey {get; set;}	
	public virtual int sizeHeight {get; set;}	
	public virtual int version {get; set;}
	public virtual int generationTime {get; set;}				// Time to generate the reward.			
	public virtual int generationAmount {get; set;}				// Amount of reward to generate each time interval. For obstacles this is reward amount for clearing.
	public virtual int generationStorage {get; set;}			// Maximum amount of generated reward to store in this building. Acknowledgement indicator will appear once this value is reached.
	public virtual AssetCategoryEnum assetCategory {get; set;}		//TODO : It should be a seperate table rather than enum.

	[Ignore]
	public virtual bool isObstacle {get; set;}					// If this is the true the building is an obstacle. It can't be built by players only cleared form the scene.
	[Ignore]
	public virtual bool isPath {get; set;}						// If this is the true the building is a path. It builds insantly and is handled by the Path Manager.
	[Ignore]
	public virtual int level {get; set;}						// Level required to build.
	[Ignore]
	public virtual List<string> allowIds {
				get {
					if (_allowIds ==null) 
						_allowIds = Utility.StringToList(allowIdsStr);
					return _allowIds;
					} 
				set{}
	}			// Ids of the buildings and units that this building allows.

	[Ignore]
	public virtual List<string> requireIds {
				get {
					if (_requireIds ==null) 
						_requireIds = Utility.StringToList(allowIdsStr);
					return _requireIds;
				} 
				set{}
	}	// Ids of the buildings required before this building can be built.

	[Ignore]
	public virtual List<string> activities {
		get {
			if (_activities ==null) 
				_activities = Utility.StringToList(activitiesStr);
			return _activities;
		} 
		set{}
	}  	// Types of activities this building allows.

	[Ignore]
	public virtual List<GridPosition> shape {		
		get {
			if (_shape == null) 
				_shape = GridPosition.GetGridPositions(sizex, sizey);
			return _shape;
		} 
		set{}
	}	// Shape of the building in the isometric grid.


	[Ignore]
	public virtual RewardType generationType {get; set;}		// Type of reward automatically generated by this building. Ignored if generation amount = 0. For obstacles this is reward type for clearing.
	[Ignore]
	public virtual int occupantStorage {get; set;}				// The space for holding occupants. Note that occupants size can be variable (for example a building could hold two tigers with a size of 1, but only one elephant whic has a size of 2).
	[Ignore]
	public virtual List<CustomResource> additionalCosts {get {return _additionalCosts;} set{ if (value != null) _additionalCosts = value;}}	// Additional resource costs for the building.
		
}